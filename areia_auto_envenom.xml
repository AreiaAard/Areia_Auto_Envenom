<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient [
    <!ENTITY cmdprefix "aae">
]>

<muclient>
<plugin
    name="Areia_Auto_Envenom"
    author="Areia"
    id="6f7b078734f87ed9f640cb21"
    language="Lua"
    purpose="Envenom bot"
    save_state="y"
    date_written="2022-10-31 17:30:04"
    requires="5.06"
    version="0.12"
   >
<description trim="y">
<![CDATA[
]]>
</description>

</plugin>

<include name="constants.lua"/>



<script>
<![CDATA[
--------------------------------------------------
-- Dependencies
--------------------------------------------------

require "commas"
require "copytable"
require "json"
require "gmcphelper"
local https = require "ssl.https"
require "tprint"
require "var"
require "wait"
dofile(GetInfo(60) .. "aardwolf_colors.lua")



--------------------------------------------------
-- Item Class
-- Representing game objects
--------------------------------------------------

Item = {}
Item.__index = Item


function Item.__tostring(self)
    local type = Invmon.get_item_type_string(self.type)
    type = Utility.pascal(type)
    return type .. "<" .. self.id .. "> " .. self.name
end


function Item:new(data)
    local obj = {
        id = tonumber(data.id) or error("Numeric Item id required.", 3),
        name = data.name or error("Item name required.", 3),
        type = tonumber(data.type) or error("Numeric Item type required.", 3),
        level = tonumber(data.level) or error("Numeric Item level required.", 3),
        owner = data.owner or error("String Item owner required.", 3)
    }
    if not (type(data.flags) == "string" and data.flags:match("^%a*$")) then
        error("Alpha-string Item flags required.", 3)
    end
    obj.flags = data.flags:upper()
    setmetatable(obj, Item)
    return obj
end


function Item:get_type_string()
    -- Convert numeric item type to human-friendly string.
    for name, id in pairs(Invmon.ITEM_TYPE) do
        if (self.type == id) then
            local type = name:lower():gsub("_", " ")
            return type
        end
    end
    return "unknown"
end


function Item:has_flag(flag)
    -- Determine whether this item has the given flag.
    return self.flags:match(flag:upper()) and true or false
end


function Item:is_envenomable()
    -- Determine whether the Item is a weapon lacking the envenomed
    -- flag.
    return self.type == Invmon.ITEM_TYPE.WEAPON
        and not self:has_flag(Invmon.ITEM_FLAG.ENVENOMED)
end
]]>
</script>



<aliases>
    <alias
     match="^ *&cmdprefix; +config +chan(?:nel)?(?<setting> +.*)?$"
     enabled="y"
     script="Config.set_channel"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    <alias
     match="^ *&cmdprefix; +config +helm(?<setting> +.*)?$"
     enabled="y"
     script="Config.set_helmid"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    <alias
     match="^ *&cmdprefix; +config +bag(?<setting> +.*)?$"
     enabled="y"
     script="Config.set_bagid"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
</aliases>


<script>
<![CDATA[
--------------------------------------------------
-- Config
--------------------------------------------------

Config = {}


function Config.initialize()
    Config.load()
end


function Config.default()
    local data = {
        channel = "gtell",
        helmid = "'aardwolf helm true sight'",
    }
    return json.encode(data)
end


function Config.load()
    Config.data = json.decode(var.config or Config.default())
end


function Config.save()
    var.config = json.encode(Config.data)
end


function Config.get(key)
    return Config.data[key]
end


function Config.set(key, val)
    Config.data[key] = val
    Config.save()
end


function Config.set_channel(alias, line, wc)
    local setting = trim(wc.setting):lower()
    if (setting ~= "") then
        Config.set("channel", setting)
    end
    local msg = "Announcement channel set to %s."
    msg = msg:format(Config.get("channel"))
    Utility.msg(msg)
end


function Config.set_helmid(alias, line, wc)
    local setting = trim(wc.setting):lower()
    if (setting ~= "") then
        Config.set("helmid", setting)
    end
    local msg = "Helm of True Sight ID set to %s."
    msg = msg:format(Config.get("helmid"))
    Utility.msg(msg)
end


function Config.set_bagid(alias, line, wc)
    local setting = trim(wc.setting):lower()
    if (setting ~= "") then
        Config.set("bagid", setting)
    end
    local id = Config.get("bagid")
    if (not id) then
        Utility.msg("Bag ID not yet set.")
        return
    end
    local msg = "Bag ID set to %s."
    Utility.msg(msg:format(id))
end
]]>
</script>



<aliases>
    <alias
     match="^ *&cmdprefix; +(?<setting>on|off|enable|disable) *$"
     enabled="y"
     script="Envenom.activate"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    <alias
     match="^ *&cmdprefix; +announce(?<channel> +.*)?$"
     enabled="y"
     send_to="12"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    <send>
        local channel = trim("%&lt;channel&gt;")
        Envenom.announce_state(channel)
    </send>
    </alias>
    <alias
     match="^ *&cmdprefix; +env(?:enom)? *$"
     enabled="y"
     script="Envenom.envenom"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    <alias
     match="^ *&cmdprefix; +cancel *$"
     enabled="y"
     script="Envenom.cancel"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    <alias
     match="^ *&cmdprefix; +(?:display|items|list) *$"
     enabled="y"
     script="Envenom.display_items"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
</aliases>


<script>
<![CDATA[
--------------------------------------------------
-- Envenom
--------------------------------------------------

Envenom = {}

-- Whether module is enabled or disabled.
Envenom.active = false
-- Whether an envenom operation is currently in progress.
Envenom.isEnvenoming = false
-- List of items received while module is active.
Envenom.items = {}
-- Track amount of gold received in a session.
Envenom.gold = 0

-- Regex to determine the outcome of envenom attempts.
Envenom.REGEX = "^(?:You (?<coat>coat) .+ with deadly poison"
    .. "|You (?<fail>fail) to envenom .+"
    .. "|You are (?<unable>unable) to envenom .+"
    .. "|.+ is (?<already>already) coated with poison)\\.$"
-- Number of failed envenom attempts to tolerate before cancellation.
Envenom.MAX_ATTEMPTS = 3
-- Number of seconds to wait for the regex before cancellation.
Envenom.TIMEOUT = 60


function Envenom.activate(alias, line, wc)
    if (not Envenom.check_subclass()) then
        return
    end
    local setting = wc.setting:lower()
    if (setting == "on" or setting == "enable") then
        if (not Envenom.wear_helm()) then
            return
        end
        Envenom.active = true
    else
        Envenom.active = false
        Envenom.items = {}
        Envenom.remove_helm()
        Envenom.display_gold()
        Envenom.gold = 0
    end
    Invmon.monitor(Envenom.active)
    Envenom.announce_state()
end


function Envenom.wear_helm()
    -- Attempt to wear the user's Aard helm. Return true if helm and
    -- bag IDs are set; false otherwise.
    local helm = Config.get("helmid")
    local bag = Config.get("bagid")
    if (not helm) then
        Utility.msg("No ID is set for your Helm of True Sight.")
        Utility.msg("Submit @Yaae config helm <id> @wto set it.")
        return false
    elseif (not bag) then
        Utility.msg("No location known for storage of your Helm of True Sight.")
        Utility.msg("Submit @Yaae config bag <id> @wto set it.")
        return false
    end
    local stackChar = GetAlphaOption("command_stack_character")
    local cmd = "get %s %s%swear %s"
    Execute(cmd:format(helm, bag, stackChar, helm))
    return true
end


function Envenom.remove_helm()
    -- Attempt to remove the user's Aard helm. Return true if helm and
    -- bag IDs are set; false otherwise.
    local helm = Config.get("helmid")
    local bag = Config.get("bagid")
    if (not helm) then
        Utility.msg("No ID is set for your Helm of True Sight.")
        Utility.msg("Submit @Yaae config helm <id> @wto set it.")
        return false
    elseif (not bag) then
        Utility.msg("No location known for storage of your Helm of True Sight.")
        Utility.msg("Submit @Yaae config bag <id> @wto set it.")
        return false
    end
    local stackChar = GetAlphaOption("command_stack_character")
    local cmd = "remove %s%sput %s %s%swear all"
    Execute(cmd:format(helm, stackChar, helm, bag, stackChar))
    return true
end


function Envenom.announce_state(channel)
    -- Produce notification messages depending on whether the bot is
    -- enabled or disabled. Messages are sent to the channel defined
    -- by Config.get("channel") if none is given.
    if (not channel or channel:match("^%s*$")) then
        channel = Config.get("channel")
    end
    local msg
    if (not Envenom.active) then
        msg = "%s @WEnvenoms are no longer available.$C"
        Execute(msg:format(channel))
        return
    end
    local location = GMCP.get_location()
    msg = "%s @WEnvenoms are now available at %s.$C"
    Execute(msg:format(channel, location))
    msg = "%s @WPlease only give weapons individually. 'Give all.weapon' will be ignored.$C"
    Execute(msg:format(channel))
end


function Envenom.item_received(item)
    -- Called whenever the receipt of a single item is detected by
    -- the Invmon module.
    if (getmetatable(item) ~= Item) then
        error("Only Item objects are accepted.", 2)
    end
    table.insert(Envenom.items, item)
end


function Envenom.item_given(id)
    -- Called whenever the giving of a single item is detected by the
    -- Invmon module.
    id = tonumber(id)
    for i, item in ipairs(Envenom.items) do
        if (item.id == id) then
            table.remove(Envenom.items, i)
        end
    end
end


function Envenom.gold_received(amount)
    -- Called by Invmon module whenever gold is received during an
    -- envenom operation.
    amount = tonumber(amount) or 0
    Envenom.gold = Envenom.gold + amount
end


function Envenom.envenom(alias, line, wc)
    if (Envenom.isEnvenoming) then
        Utility.msg("Another envenom operation is already in progress. Please wait.")
        return
    end
    if (not Envenom.check_subclass()) then
        return
    end
    if (not Envenom.active) then
        Utility.msg("Bot is not currently active. Submit @Yaae on @wto enable it.")
        return
    end
    if (#Envenom.items == 0) then
        Utility.msg("No single items have yet been received.")
        return
    end
    wait.make(Envenom.envenom_cr)
end


function Envenom.envenom_cr()
    Envenom.isEnvenoming = true
    local successes = 0
    for i, weapon in ipairs(Envenom.items) do
        if (not Envenom.isEnvenoming) then
            -- Envenom operation has been cancelled.
            break
        end

        if (weapon:is_envenomable()) then
            local attempts = 0
            repeat
                if (GMCP.get_state() ~= GMCP.STATE.ACTIVE) then
                    Utility.msg("Must be in active state to envenom.")
                    return
                end
                if (attempts > Envenom.MAX_ATTEMPTS) then
                    Utility.msg("Too many failures. Envenom cancelled.")
                    return
                end

                attempts = attempts + 1
                SendNoEcho("envenom " .. weapon.id)
                local line, wc = wait.regexp(Envenom.REGEX, Envenom.TIMEOUT)

                if (not line) then
                    Utility.msg("Timed out. Envenom cancelled.")
                    return
                end

                -- Repeat this *only* when the result is outright failure.
                local success = wc.fail ~= "fail"
            until (success)

            successes = successes + 1
        end
    end

    if (successes == 0) then
        Utility.msg("No envenom-able weapons have yet been received.")
    end
    Envenom.return_items()
    Envenom.isEnvenoming = false
end


function Envenom.cancel(alias, line, wc)
    if (not Envenom.active) then
        Utility.msg("Bot is not currently active. Submit @Yaae on @wto enable it.")
        return
    end
    if (not Envenom.isEnvenoming) then
        Utility.msg("No envenom operation is in progress. Submit @Yaae env @wto begin.")
        return
    end
    -- Setting this to false will terminate the main envenom loop.
    Envenom.isEnvenoming = false
    Utility.msg("Envenom operation cancelled.")
end


function Envenom.return_items()
    local cmd = "give %d %s"
    for i, item in ipairs(Envenom.items) do
        SendNoEcho(cmd:format(item.id, item.owner))
    end
end


function Envenom.display_gold()
    -- Notify the user of the amount of gold received during an
    -- envenom session.
    if (Envenom.gold == 0) then
        return
    end
    local amount = commas(Envenom.gold)
    local msg = "Received a total of %s gold this session."
    Utility.msg(msg:format(amount))
end


function Envenom.display_items(alias, line, wc)
    local entry = "@w| @W%-10.10s @w| @W%-12.12s @w| @W%-25.25s @w|"
    local seperator = "@w+------------+--------------+---------------------------+"
    Utility.print(seperator)
    Utility.print("@w|     @YID     @w|    @YOwner     @w|        @YDescription        @w|")
    Utility.print(seperator)
    for _, item in ipairs(Envenom.items) do
        Utility.print(entry:format(item.id, item.owner, item.name))
    end
    Utility.print(seperator)
end


function Envenom.filter_items()
    -- Produce a list of received items which are weapons lacking the
    -- envenomed flag.
    local weapons = {}
    for i, item in ipairs(Envenom.items) do
        if (item.type == Invmon.ITEM_TYPE.WEAPON
        and not item:has_flag(Invmon.ITEM_FLAG.ENVENOMED)) then
            table.insert(weapons, item)
        end
    end
    return weapons
end


function Envenom.check_subclass()
    -- Determine whether the current char is a Venomist. Print an
    -- error message if not. Returns true/false.
    local subclass = GMCP.get_subclass()
    if (subclass ~= "Venomist") then
        local msg = "%ss are unable to perform mass envenoms."
        Utility.msg(msg:format(subclass))
        return false
    end
    return true
end
]]>
</script>



<triggers>
    <trigger
     name="trigger_invmon_gag"
     match="^\{inv(?:item|mon)\}.+$"
     enabled="y"
     omit_from_output="y"
     keep_evaluating="y"
     regexp="y"
     sequence="0"
    >
    </trigger>
    <trigger
     group="group_invmon"
     match="^\{invitem\}(?<id>\d+),(?<flags>[A-Z]*),(?<name>.+?),(?<level>\d+),(?<type>\d+),(?<unique>0|1),(?<wearloc>-?\d+),(?<timer>-?\d+)\n\{invmon\}(?<action>\d+),\k<id>,(?<containerid>-?\d+),\k<wearloc>\nYou receive (?<item>.+) from (?<owner>.+)\.\Z"
     enabled="n"
     script="Invmon.item_received"
     regexp="y"
     multi_line="y"
     lines_to_match="3"
     sequence="100"
    >
    </trigger>
    <trigger
     group="group_invmon"
     match="^\{invmon\}(?<action>\d+),(?<id>\d+),(?<containerid>-?\d+),(?<wearloc>-?\d+)\nYou give (?<item>.+) to (?<owner>.+)\.$"
     enabled="n"
     script="Invmon.item_given"
     regexp="y"
     multi_line="y"
     lines_to_match="2"
     sequence="100"
    >
    </trigger>
    <trigger
     group="group_invmon"
      match="^You receive (?<amount>[0-9,]+) gold from .+\.$"
     enabled="n"
     script="Invmon.gold_received"
     regexp="y"
     sequence="100"
    >
    </trigger>
</triggers>


<script>
<![CDATA[
--------------------------------------------------
-- Invmon
--------------------------------------------------

Invmon = {}

Invmon.ACTION = {
    ["REMOVED"] = 1, ["WORN"] = 2,
    ["LOST"] = 3, ["RECEIVED"] = 4,
    ["CONTAINER_GET"] = 5, ["CONTAINER_PUT"] = 6,
    ["CONSUMED"] = 7, 
    ["VAULT_PUT"] = 9, ["VAULT_GET"] = 10,
    ["KEYRING_PUT"] = 11, ["KEYRING_GET"] = 12,
}

Invmon.ITEM_FLAG = {
    ["KEPT"] = "K", ["INVIS"] = "I",
    ["MAGICAL"] = "M", ["GLOWING"] = "G",
    ["HUMMING"] = "H", ["CURSED"] = "C",
    ["ENVENOMED"] = "E", ["TEMPERED"] = "T",
    ["WEAKENED"] = "W",
}

Invmon.ITEM_TYPE = {
    ["LIGHT"] = 1, ["SCROLL"] = 2,
    ["WAND"] = 3, ["STAFF"] = 4,
    ["WEAPON"] = 5, ["TREASURE"] = 6,
    ["ARMOR"] = 7, ["POTION"] = 8,
    ["FURNITURE"] = 9, ["TRASH"] = 10,
    ["CONTAINER"] = 11, ["DRINK"] = 12,
    ["KEY"] = 13, ["FOOD"] = 14,
    ["BOAT"] = 15, ["CORPSE_MOB"] = 16,
    ["CORPSE_PLAYER"] = 17, ["FOUNTAIN"] = 18,
    ["PILL"] = 19, ["PORTAL"] = 20,
    ["BEACON"] = 21, ["GIFT_CARD"] = 22,
    ["RAW_MATERIAL"] = 24, ["CAMP_FIRE"] = 25,
    ["FORGE"] = 26, ["RUNESTONE"] = 27,
}


function Invmon.item_received(trigger, line, wc)
    if (wc.item:match("^%d+ %*")) then
        -- Multiple items received. Ignore.
        return
    end
    if (wc.item ~= wc.name) then
        -- Likely another case of multiple items being received, where
        -- the final invmon tag refers to an item lower down in the
        -- stack.
        return
    end
    -- Strip pretitle if any from owner name.
    wc.owner = wc.owner:match("(%a+)$")
    local item = Item:new(wc)
    Envenom.item_received(item)
end


function Invmon.item_given(trigger, line, wc)
    if (wc.item:match("^%d+ %*")) then
        -- Multiple items given. Ignore.
        return
    end
    Envenom.item_given(wc.id)
end


function Invmon.gold_received(trigger, line, wc)
    local amount = wc.amount:gsub(",", "")
    Envenom.gold_received(amount)
end


function Invmon.enable(on)
    -- Enable/disable invmon tags via GMCP. Default behavior is to
    -- enable. To disable them, `on` must be false.
    if (IsConnected()) then
        local setting = on == false and "no" or "yes"
        Send_GMCP_Packet("config invmon " .. setting)
    end
end


function Invmon.monitor(on)
    -- Set monitoring of receipt and giveing of single items by the
    -- Invmon module. When `on` is false, no invmon data will be
    -- processed.
    EnableTriggerGroup("group_invmon", on)
end
]]>
</script>



<script>
<![CDATA[
--------------------------------------------------
-- GMCP
--------------------------------------------------  

GMCP = {}

GMCP.STATE = {
    ["LOGIN"] = 1, ["MOTD"] = 2,
    ["ACTIVE"] = 3, ["AFK"] = 4,
    ["NOTE"] = 5, ["EDIT"] = 6,
    ["PAGER"] = 7, ["FIGHTING"] = 8,
    ["SLEEPING"] = 9, ["SITTING"] = 11,
    ["RUNNING"] = 12,
}


function GMCP.get_state()
    return tonumber(gmcp("char.status.state")) or -1
end


function GMCP.get_location()
    local uid = gmcp("room.info.num") or "-1"
    local room = gmcp("room.info.name") or "Somewhere"
    local zone = Utility.pascal(gmcp("room.info.zone")) or "Somewhere"
    local msg = "@G%s @w/ %s @w(#@Y%d@w)"
    return msg:format(zone, room, uid)
end


function GMCP.get_subclass()
    return gmcp("char.base.subclass") or ""
end
]]>
</script>



<aliases>
    <alias
     match="^ *&cmdprefix; +update *$"
     enabled="y"
     script="Remote.update_plugin"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
</aliases>

<script>
<![CDATA[
--------------------------------------------------
-- Remote
--------------------------------------------------

Remote = {}


function Remote.update_plugin(alias, line, wc)
    local url = "https://raw.githubusercontent.com/AreiaAard/Areia_Auto_Envenom/main/areia_auto_envenom.xml"
    local xml = https.request(url)
    if (not xml) then
        Utility.msg("Failed to download remote plugin file.")
        return false
    end

    local pluginID = GetPluginID()
    local localVersion = GetPluginInfo(pluginID, 19) or 0
    local localVersionStr = string.format("%1.2f", localVersion)
    local remoteVersionStr = xml:match('%s%s+version="([0-9%.]+)"')
    local remoteVersion = tonumber(remoteVersionStr or "") or 0

    if (localVersion == remoteVersion) then
        Utility.msg("Version is up to date.")
        return true
    end

    Utility.msg(string.format(
        "Updating from v%s to v%s...",
        localVersionStr, remoteVersionStr
    ))
    Utility.msg("Please do not touch anything.", false)
    local fileName = GetPluginInfo(pluginID, 6)
    local file = assert(io.open(fileName, "w"))
    file:write(xml)
    file:close()
    Utility.reload_plugin()
    return true
end
]]>
</script>



<aliases>
    <alias
        match="^ *&cmdprefix; +help *$"
        enabled="y"
        script="Help.main"
        regexp="y"
        ignore_case="y"
        sequence="100"
    >
    </alias>
    <alias
        match="^ *&cmdprefix; +help +(?<topic>\w+) *$"
        enabled="y"
        script="Help.main"
        regexp="y"
        ignore_case="y"
        sequence="100"
    >
    </alias>
</aliases>

<script>
<![CDATA[
--------------------------------------------------
-- Help
--------------------------------------------------

Help = {}


function Help.initialize()
    Help.topics = {
        {
            name = "config",
            desc = "Plugin configuration options",
            func = Help.config,
        }, {
            name = "envenom",
            desc = "Performing envenom sessions",
            func = Help.envenom,
        }, {
            name = "misc",
            desc = "Other plugin commands",
            func = Help.misc,
        },
    }
end


function Help.display_helpfile(title, body)
    local fullTitle = ("@W%s Help - %s"):format(Utility.msgTagText, title)
    Utility.print(Utility.center(fullTitle, 80))
    Utility.print(string.rep("=", 80))
    Utility.print(body)
end


function Help.main(alias, line, wc)
    local topicName = wc.topic
    if (not topicName) then
        Help.list_topics()
        return
    end

    topicName = topicName:lower()
    for _, topic in ipairs(Help.topics) do
        if (Utility.starts_with(topic.name, topicName)) then
            topic.func()
            return
        end
    end

    Utility.msg(string.format(
        "%s is not a valid help topic.",
        Utility.pascal_case(topicName)
    ))
    Help.list_topics()
end


function Help.list_topics()
    local fullTitle = ("@W%s Help - Topics"):format(Utility.msgTagText)
    Utility.print(Utility.center(fullTitle, 80))
    Utility.print(string.rep("=", 80))

    for _, topic in ipairs(Help.topics) do
        local cmd = string.format("aae help %-10.10s", topic.name)
        Hyperlink(trim(cmd), cmd, "", "yellow", "black", false, true)
        ColourNote("silver", "black", ": ", "", "", topic.desc)
        Note()
    end

    Utility.print("Click on or type one of the above to view help.")
end


function Help.config()
    local body = [===[
    The following options modify the plugin's behavior and are saved across
Mush sessions. Invoking them requires that you type 'aae config', followed by
the option, followed by any arguments (e.g., 'aae config channel gtell').
Arguments displayed in square brackets are optional; omitting these will dis-
play the option's current value.

@Ychan [<channel>]@w: Set the channel on which the envenom bot will announce the
    start and end of envenom sessions. Default is gtell, but you might want to
    set this to barter, for example, to do public envenoms.
@Yhelm [<id>]@w: Set the id/keywords of your Aard Helm of True Sight. The script
    will use this to wear and remove the helm automatically at the start and
    end of each envenom session. Default is 'aardwolf helm true sight'.
@Ybag [<id>]@w: Set the id/keywords of the container in which you store your Aard
    helm. The script uses this to retrieve and re-store the helm at the start
    and end of each envenom session. No default value.
]===]
    Help.display_helpfile("Config", body)
end


function Help.envenom()
    local body = [===[
    The following commands operate the envenom bot itself. Note that no item
or gold tracking will occur while the bot is disabled, and that disabling the
bot will erase any information stored for the current session.

@Yaae on|off@w: Enable or disable the envenom bot, starting or ending a session.
    Note that no item or gold tracking will occur while the bot is disabled,
    and disabling the bot will erase any data stored for the current session.
@Yaae list@w: Display a list of items which the bot has recognized as being re-
    ceived during the current session. Only the items that appear on this list
    are eligible for envenoming. Note that any items given in stacks together
    (e.g., via 'give all.item' syntax) will not be recognized.
@Yaae env@w: Perform an envenom operation. This will analyze all single items re-
    ceived, searching for non-envenomed weapons and envenoming them. When all
    weapons have been envenomed, all items that would appear on the items list
    (see above) are returned to their owners. You can also use this command to
    retry the returning of all items in case any failed to be returned (e.g.,
    due to the owner having nogive toggled, etc.) until the list is empty.
@Yaae cancel@w: Prematurely abort an ongoing envenom operation and return all items
    to their owners.
@Yaae announce [<channel>]@w: Manually announce the bot's state. By default, this
    appears on the channel specified by @Yaae config chan@w. You can modify this on
    the fly by supplying another channel name (e.g., @Yaae announce ft@w).
]===]
    Help.display_helpfile("Envenom", body)
end


function Help.misc()
    local body = [===[
@Yaae update    @w: Checks for an updated version of the plugin and installs it
                if found.
]===]
    Help.display_helpfile("Misc", body)
end
]]>
</script>



<script>
<![CDATA[
--------------------------------------------------
-- Utility
--------------------------------------------------

Utility = {}


function Utility.initialize()
    local modules = {
        Config,
        Help,
    }
    for _, module in ipairs(modules) do
        if (module.initialize) then
            module.initialize()
        end
    end
    Utility.msgTagText = "Envenom"
    Utility.msgTag = ("[@Y%s@w]: "):format(Utility.msgTagText)
end


function Utility.deinitialize()
end


function Utility.print(str)
    -- Lets us use Aard color codes in our ColourNotes
    AnsiNote(stylesToANSI(ColoursToStyles(string.format("@w%s@w", str))))
end


function Utility.msg(str, showTag)
    if (showTag ~= false) then
        -- Suppress tag only when false is passed explicitly (i.e.,
        -- default is true).
        Utility.print(Utility.msgTag .. str)
        return
    end
    local tagLength = #strip_colours(Utility.msgTag)
    local indent = (" "):rep(tagLength)
    Utility.print(indent .. str)
end


function Utility.pascal(str)
    -- Capitalize the first letter of each word in a string.
    str = str:gsub("(%a)([%w_']*)",
        function(first,remainder)
            return string.format("%s%s", first:upper(), remainder:lower())
        end
    )
    return str
end


function Utility.starts_with(s, t)
    if not (type(s) == "string" and type(t) == "string") then
        return false
    end
    return s:sub(1, #t) == t
end


function Utility.ends_with(s, t)
    return Utility.starts_with(s:reverse(), t:reverse())
end


function Utility.center(str, lineLength, fill)
    local centerLength = #strip_colours(str)
    if (centerLength >= lineLength) then
        return str
    end
    local leftLength = math.floor((lineLength - centerLength) / 2)
    local rightLength = lineLength - centerLength - leftLength
    fill = fill or " "
    local centered = "%s%s%s"
    return centered:format(fill:rep(leftLength), str, fill:rep(rightLength))
end


function Utility.reload_plugin()
    if (GetAlphaOption("script_prefix") == "") then
        SetAlphaOption("script_prefix", "\\\\\\")
    end
    local scriptPrefix = GetAlphaOption("script_prefix")
    local pluginID = GetPluginID()
    local cmd = "%sDoAfterSpecial(1, \"ReloadPlugin('%s')\", sendto.script)"
    Utility.msg("Reloading...")
    Execute(cmd:format(scriptPrefix, pluginID))
end
]]>
</script>



<script>
<![CDATA[
--------------------------------------------------
-- Plugin Callbacks
--------------------------------------------------

function OnPluginConnect()
    Invmon.enable()
end


function OnPluginInstall()
    Utility.initialize()
    OnPluginConnect()
    Utility.msg("Plugin installed. Submit @Yaae help @wfor help.")
end


function OnPluginEnable()
    OnPluginInstall()
end


function OnPluginClose()
    Utility.deinitialize()
end


function OnPluginDisable()
    OnPluginClose()
end


function OnPluginBroadcast(msg, id, name, text)
    if (id == "3e7dedbe37e44942dd46d264") then
    end
end
]]>
</script>


</muclient>
